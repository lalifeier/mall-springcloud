buildscript {
    apply from: rootProject.file( 'version.gradle' )

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://developer.huawei.com/repo/'}
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${gradleDockerPluginVersion}"
    }
}


allprojects {
    group 'com.github.lalifeier'
    version rootProject.ext.projectVersion

    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
}

ext {
    javaProjects = subprojects.findAll { it.file("build.gradle").exists() }
    bootProjects = subprojects.findAll { it.name.endsWith('-service') || it.name in ['mall-gateway', 'mall-monitor', 'mall-admin', 'mall-demo'] }
}

configure(javaProjects) { project ->
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://developer.huawei.com/repo/'}
        mavenLocal()
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    idea {
        module {
            downloadJavadoc = false
            downloadSources = false
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${rootProject.ext.springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${rootProject.ext.springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${rootProject.ext.springCloudAlibabaVersion}"
        }

        dependencies {
             for (depJar in rootProject.ext.dependencies) {
               dependency depJar.value
             }
        }
    }

//    javaPlatform {
//        allowDependencies()
//    }

    dependencies {
        //  gradle 5.0+
//        implementation platform("org.springframework.boot:spring-boot-dependencies:${rootProject.ext.springBootVersion}")
//        implementation platform("org.springframework.cloud:spring-cloud-dependencies:${rootProject.ext.springCloudVersion}")
//        implementation platform("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${rootProject.ext.springCloudAlibabaVersion}")

       compileOnly rootProject.ext.dependencies.lombok
       annotationProcessor rootProject.ext.dependencies.lombok
       testCompileOnly rootProject.ext.dependencies.lombok
       testAnnotationProcessor rootProject.ext.dependencies.lombok
//
//        api rootProject.ext.slf4j

//        annotationProcessor rootProject.ext.mapstructProcessor
//        testAnnotationProcessor rootProject.ext.mapstructProcessor
    }

    test {
        useJUnitPlatform()
    }
}

//maven
configure(javaProjects) { project ->
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        repositories {
            maven {
                url MAVEN_REPOSITORY_URL
                credentials {
                    username = MAVEN_REPOSITORY_USERNAME
                    password = MAVEN_REPOSITORY_PASSWORD
                }
            }
        }
    }
}

//docker
configure(bootProjects) {
    apply plugin: 'application'
    apply plugin: 'com.bmuschko.docker-spring-boot-application'

    bootJar {
        enabled = true
    }

    docker {
        registryCredentials {
            url = DOCKER_REGISTRY_URL
            username = DOCKER_USERNAME
            password = DOCKER_PASSWORD
        }

        springBootApplication {
            baseImage = 'openjdk:8-alpine'
            ports = [8080]
            images = ["${project.group}/${project.name}:${project.version}"]
            jvmArgs = ['-Dspring.profiles.active=prod']
        }
    }
}
